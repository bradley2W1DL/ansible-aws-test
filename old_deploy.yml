---
- hosts: localhost
  vars:
    env: development
    update_homebrew: false
  vars_files:
    - "secrets/{{ env }}.yml"
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws.access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws.secret_key }}"
    AWS_DEFAULT_REGION: "{{ aws.default_region }}"
  connection: local

  tasks:
  # install prerequisites
  - name: install babel cli
    homebrew:
      name: babel
      state: present
      update_homebrew: "{{ update_homebrew }}"
  - name: install aws-cli
    homebrew:
      name: awscli
      state: present
  - name: make sure jq is installed
    homebrew:
      name: jq
      state: present
  - name: check for AWS connection
    shell: aws s3 ls
    register: aws_result
    failed_when: aws_result.rc != 0

  #
  # Bundle up all functions in /lambda_functions dir
  #
  - include_role:
      name: bundle_lambda_functions

  #
  # Create s3 bucket (if needed) and sync files
  #
  # TODO GET Cloudformation to do this
  - include_role:
      name: sync_functions_with_s3

  - name: remove .tmp_lambda_dir
    file:
      path: .tmp_lambda_dir
      state: absent

  #
  # Use AWS SAM template to provision cloudformation resources
  #
  - name: fetch files from s3 bucket # change to local .tmp_lambda_dir
    shell: aws s3 ls s3://{{ lambda_s3_bucket }} | grep \.zip$ | awk '{print $4}' | sed 's/\.zip//1'
    register: lambda_files
    tags:
      - cloudformation
      - sam_template

  - include_role:
      name: generate_sam_template
    vars:
      lambda_functions: "{{ lambda_files.stdout_lines }}"
      local_dev: false
    tags:
      - cloudformation
      - sam_template

  - name: generate cloudformation template
    shell: aws cloudformation package --template-file sam_template.yml --output-template-file serverless_output.yml --s3-bucket {{ lambda_s3_bucket }}
    tags: cloudformation

  - name: deploy cloudformation stack
    shell: aws cloudformation deploy --template-file serverless_output.yml --stack-name {{ stack_name }} --capabilities CAPABILITY_IAM
    register: cf_deployment
    ignore_errors: yes
    tags: cloudformation

  - name: fetch the name of generated s3 bucket

  - name: regenerate sam_template with lambda_functions

  - name: check for cloudformation deployment failure
    fail:
      msg: AWS Cloudformation deployment failed
    when: "'No changes to deploy' not in cf_deployment.stderr and cf_deployment.stderr != ''"
    tags: cloudformation

  - name: remove serverless_output
    file:
      name: ./serverless_output.yml
      state: absent
